// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    isAdmin       Boolean   @default(false)
    isBlocked     Boolean   @default(false)
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    comments  Comment[]
    questions Question[]
    reactions Reaction[]
    posts     Post[]
    stacks    Stack[]
}

model Bookmark {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    host        String
    url         String   @unique
    title       String
    description String
    faviconUrl  String?

    comments  Comment[]
    reactions Reaction[]

    tag   BookmarkTag @relation(fields: [tagId], references: [id])
    tagId String

    @@index([tagId])
}

model BookmarkTag {
    id        String     @id @default(cuid())
    name      String     @unique
    bookmarks Bookmark[]
}

model Question {
    id          String     @id @default(cuid())
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    author      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    title       String
    description String
    userId      String
    comments    Comment[]
    reactions   Reaction[]
}

model Comment {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    text       String
    author     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
    question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
    post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
    stack      Stack?    @relation(fields: [stackId], references: [id], onDelete: Cascade)
    bookmarkId String?
    questionId String?
    postId     String?
    stackId    String?
    workId     String?

    @@index([bookmarkId])
    @@index([questionId])
    @@index([postId])
    @@index([stackId])
}

model Post {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    publishedAt  DateTime?
    published    Boolean    @default(false)
    author       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    slug         String     @unique
    title        String
    content      String     @default("")
    type         String     @default("writing")
    featureImage String?
    comments     Comment[]
    reactions    Reaction[]
    userId       String

    @@index([publishedAt])
}

model Stack {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    slug        String   @unique
    description String
    image       String
    url         String

    tag   StackTag @relation(fields: [tagId], references: [id])
    tagId String

    comments  Comment[]
    reactions Reaction[]
    users     User[]

    @@index([tagId])
}

model StackTag {
    id     String  @id @default(cuid())
    name   String  @unique
    stacks Stack[]
}

model Reaction {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
    question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
    post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
    stack      Stack?    @relation(fields: [stackId], references: [id], onDelete: Cascade)
    bookmarkId String?
    questionId String?
    postId     String?
    stackId    String?

    @@index([bookmarkId])
    @@index([questionId])
    @@index([postId])
    @@index([stackId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
